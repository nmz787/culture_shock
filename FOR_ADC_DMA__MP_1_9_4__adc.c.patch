diff --git a/ports/stm32/adc.c b/ports/stm32/adc.c
index efc89a7..fa5b878 100644
--- a/ports/stm32/adc.c
+++ b/ports/stm32/adc.c
@@ -31,6 +31,7 @@
 #include "py/binary.h"
 #include "py/mphal.h"
 #include "adc.h"
+#include "dma.h"
 #include "pin.h"
 #include "timer.h"
 
@@ -140,6 +141,8 @@ typedef struct _pyb_obj_adc_t {
     mp_obj_t pin_name;
     int channel;
     ADC_HandleTypeDef handle;
+    DMA_HandleTypeDef DMA_Handle;
+    int adc_i;
 } pyb_obj_adc_t;
 
 // convert user-facing channel number into internal channel number
@@ -202,7 +205,7 @@ STATIC void adcx_init_periph(ADC_HandleTypeDef *adch, uint32_t resolution) {
 
     adch->Instance                   = ADCx;
     adch->Init.Resolution            = resolution;
-    adch->Init.ContinuousConvMode    = DISABLE;
+    adch->Init.ContinuousConvMode    = ENABLE; //DISABLE;
     adch->Init.DiscontinuousConvMode = DISABLE;
     adch->Init.NbrOfDiscConversion   = 0;
     adch->Init.NbrOfConversion       = 1;
@@ -213,7 +216,7 @@ STATIC void adcx_init_periph(ADC_HandleTypeDef *adch, uint32_t resolution) {
     adch->Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV2;
     adch->Init.ScanConvMode          = DISABLE;
     adch->Init.DataAlign             = ADC_DATAALIGN_RIGHT;
-    adch->Init.DMAContinuousRequests = DISABLE;
+    adch->Init.DMAContinuousRequests = ENABLE; //DISABLE;
     #elif defined(STM32H7)
     adch->Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
     adch->Init.BoostMode             = ENABLE;
@@ -263,6 +266,29 @@ STATIC void adc_init_single(pyb_obj_adc_t *adc_obj) {
         nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "Can not set multimode on ADC1 channel: %d", adc_obj->channel));
     }
 #endif
+    //  DMA init  ADC1 is DMA2 channel0 stream 0 or 4 use DMA2_Stream0  thd
+    //  from dac.c
+    __DMA2_CLK_ENABLE();
+    adc_obj->DMA_Handle.Instance = DMA2_Stream0;
+    adc_obj->DMA_Handle.State = HAL_DMA_STATE_READY;
+    HAL_DMA_DeInit(&adc_obj->DMA_Handle);
+
+    adc_obj->DMA_Handle.Init.Channel = DMA_CHANNEL_0;   // dac used 7 ? thd
+    adc_obj->DMA_Handle.Init.Direction = DMA_PERIPH_TO_MEMORY;
+    adc_obj->DMA_Handle.Init.PeriphInc = DMA_PINC_DISABLE;
+    adc_obj->DMA_Handle.Init.MemInc = DMA_MINC_ENABLE;
+    adc_obj->DMA_Handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
+    adc_obj->DMA_Handle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
+    adc_obj->DMA_Handle.Init.Mode =  DMA_NORMAL;
+    adc_obj->DMA_Handle.Init.Priority = DMA_PRIORITY_HIGH;
+    adc_obj->DMA_Handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
+    adc_obj->DMA_Handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
+    adc_obj->DMA_Handle.Init.MemBurst = DMA_MBURST_SINGLE;   // spi DMA_MBURST_INC4 ?
+    adc_obj->DMA_Handle.Init.PeriphBurst = DMA_PBURST_SINGLE;
+    HAL_DMA_Init(&adc_obj->DMA_Handle);
+
+    //DMA_HandleTypeDef DMA_Handle = adc_obj->DMA_Handle;
+    __HAL_LINKDMA(&adc_obj->handle, DMA_Handle, adc_obj->DMA_Handle);
 }
 
 STATIC void adc_config_channel(ADC_HandleTypeDef *adc_handle, uint32_t channel) {
@@ -354,6 +380,7 @@ STATIC mp_obj_t adc_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_
     o->base.type = &pyb_adc_type;
     o->pin_name = pin_obj;
     o->channel = channel;
+    o->adc_i = 0;
     adc_init_single(o);
 
     return o;
@@ -402,25 +429,32 @@ STATIC MP_DEFINE_CONST_FUN_OBJ_1(adc_read_obj, adc_read);
 ///         print(val)                      # print the value out
 ///
 /// This function does not allocate any memory.
-STATIC mp_obj_t adc_read_timed(mp_obj_t self_in, mp_obj_t buf_in, mp_obj_t freq_in) {
+STATIC mp_obj_t adc_read_timed(mp_obj_t self_in, mp_obj_t buf_in) { //, mp_obj_t freq_in) {
+    /*
+    def adjust_tim5(period, width):
+        stm.mem32[stm.TIM5 + stm.TIM_ARR] = period
+        stm.mem32[stm.TIM5 + stm.TIM_CCR2] = period - width
+
+
+    */
     pyb_obj_adc_t *self = self_in;
 
     mp_buffer_info_t bufinfo;
     mp_get_buffer_raise(buf_in, &bufinfo, MP_BUFFER_WRITE);
     size_t typesize = mp_binary_get_size('@', bufinfo.typecode, NULL);
 
-    TIM_HandleTypeDef *tim;
-    #if defined(TIM6)
-    if (mp_obj_is_integer(freq_in)) {
-        // freq in Hz given so init TIM6 (legacy behaviour)
-        tim = timer_tim6_init(mp_obj_get_int(freq_in));
-        HAL_TIM_Base_Start(tim);
-    } else
-    #endif
-    {
-        // use the supplied timer object as the sampling time base
-        tim = pyb_timer_get_handle(freq_in);
-    }
+    // TIM_HandleTypeDef *tim;
+    // #if defined(TIM6)
+    // if (mp_obj_is_integer(freq_in)) {
+    //     // freq in Hz given so init TIM6 (legacy behaviour)
+    //     tim = timer_tim6_init(mp_obj_get_int(freq_in));
+    //     HAL_TIM_Base_Start(tim);
+    // } else
+    // #endif
+    // {
+    //     // use the supplied timer object as the sampling time base
+    //     tim = pyb_timer_get_handle(freq_in);
+    // }
 
     // configure the ADC channel
     adc_config_channel(&self->handle, self->channel);
@@ -429,52 +463,69 @@ STATIC mp_obj_t adc_read_timed(mp_obj_t self_in, mp_obj_t buf_in, mp_obj_t freq_
     // TODO use DMA
 
     uint nelems = bufinfo.len / typesize;
-    for (uint index = 0; index < nelems; index++) {
-        // Wait for the timer to trigger so we sample at the correct frequency
-        while (__HAL_TIM_GET_FLAG(tim, TIM_FLAG_UPDATE) == RESET) {
-        }
-        __HAL_TIM_CLEAR_FLAG(tim, TIM_FLAG_UPDATE);
-
-        if (index == 0) {
-            // for the first sample we need to turn the ADC on
-            HAL_ADC_Start(&self->handle);
-        } else {
-            // for subsequent samples we can just set the "start sample" bit
-#if defined(STM32F4) || defined(STM32F7)
-            ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
-#elif defined(STM32H7) || defined(STM32L4)
-            SET_BIT(ADCx->CR, ADC_CR_ADSTART);
-#else
-            #error Unsupported processor
-#endif
-        }
-
-        // wait for sample to complete
-        adc_wait_for_eoc_or_timeout(EOC_TIMEOUT);
-
-        // read value
-        uint value = ADCx->DR;
-
-        // store value in buffer
-        if (typesize == 1) {
-            value >>= 4;
-        }
-        mp_binary_set_val_array_from_int(bufinfo.typecode, bufinfo.buf, index, value);
-    }
-
-    // turn the ADC off
-    HAL_ADC_Stop(&self->handle);
-
-    #if defined(TIM6)
-    if (mp_obj_is_integer(freq_in)) {
-        // stop timer if we initialised TIM6 in this function (legacy behaviour)
-        HAL_TIM_Base_Stop(tim);
-    }
-    #endif
+    //HAL_ADC_Start_DMA(&self->handle, (uint32_t *)bufinfo.buf + (typesize*self->adc_i), 1);
+    HAL_ADC_Start_DMA(&self->handle, bufinfo.buf, nelems);
+    // wait for DMA to complete:  could use ISR/callback
+    ////while (self->DMA_Handle.Instance->CR & DMA_SxCR_EN);   // spin stream 0
+    ////HAL_ADC_Stop_DMA(&self->handle);
+    // if (self->adc_i<bufinfo.len)
+    //     self->adc_i += 1;
+    // else
+    //     self->adc_i = 0;
+//     for (uint index = 0; index < nelems; index++) {
+//         // Wait for the timer to trigger so we sample at the correct frequency
+//         while (__HAL_TIM_GET_FLAG(tim, TIM_FLAG_UPDATE) == RESET) {
+//         }
+//         __HAL_TIM_CLEAR_FLAG(tim, TIM_FLAG_UPDATE);
+
+//         if (index == 0) {
+//             // for the first sample we need to turn the ADC on
+//             HAL_ADC_Start(&self->handle);
+//         } else {
+//             // for subsequent samples we can just set the "start sample" bit
+// #if defined(STM32F4) || defined(STM32F7)
+//             ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
+// #elif defined(STM32H7) || defined(STM32L4)
+//             SET_BIT(ADCx->CR, ADC_CR_ADSTART);
+// #else
+//             #error Unsupported processor
+// #endif
+//         }
+
+//         // wait for sample to complete
+//         adc_wait_for_eoc_or_timeout(EOC_TIMEOUT);
+
+//         // read value
+//         uint value = ADCx->DR;
+
+//         // store value in buffer
+//         if (typesize == 1) {
+//             value >>= 4;
+//         }
+//         mp_binary_set_val_array_from_int(bufinfo.typecode, bufinfo.buf, index, value);
+//     }
+
+//     // turn the ADC off
+//     HAL_ADC_Stop(&self->handle);
+
+//     #if defined(TIM6)
+//     if (mp_obj_is_integer(freq_in)) {
+//         // stop timer if we initialised TIM6 in this function (legacy behaviour)
+//         HAL_TIM_Base_Stop(tim);
+//     }
+//     #endif
 
     return mp_obj_new_int(bufinfo.len);
 }
-STATIC MP_DEFINE_CONST_FUN_OBJ_3(adc_read_timed_obj, adc_read_timed);
+STATIC MP_DEFINE_CONST_FUN_OBJ_2(adc_read_timed_obj, adc_read_timed);
+
+STATIC mp_obj_t adc_read_timed_stop(mp_obj_t self_in) {
+    pyb_obj_adc_t *self = self_in;
+    while (self->DMA_Handle.Instance->CR & DMA_SxCR_EN);   // spin stream 0
+    HAL_ADC_Stop_DMA(&self->handle);
+    return mp_const_none;
+}
+STATIC MP_DEFINE_CONST_FUN_OBJ_1(adc_read_timed_stop_obj, adc_read_timed_stop);
 
 // read_timed_multi((adcx, adcy, ...), (bufx, bufy, ...), timer)
 //
@@ -583,6 +634,7 @@ STATIC MP_DEFINE_CONST_STATICMETHOD_OBJ(adc_read_timed_multi_obj, MP_ROM_PTR(&ad
 STATIC const mp_rom_map_elem_t adc_locals_dict_table[] = {
     { MP_ROM_QSTR(MP_QSTR_read), MP_ROM_PTR(&adc_read_obj) },
     { MP_ROM_QSTR(MP_QSTR_read_timed), MP_ROM_PTR(&adc_read_timed_obj) },
+	{ MP_ROM_QSTR(MP_QSTR_read_timed_stop), MP_ROM_PTR(&adc_read_timed_stop_obj) },
     { MP_ROM_QSTR(MP_QSTR_read_timed_multi), MP_ROM_PTR(&adc_read_timed_multi_obj) },
 };
 
